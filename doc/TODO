## current [desired] library interface ##

allocator/
    allocator.cpp
    allocator.hpp
    arena.cpp
    arena.hpp
array/
    array.hpp
    array.ipp
concept/
    assignable.hpp
    constructible.hpp
    deleter_for.hpp
    derived_from.hpp
    pointer_for.hpp
    trivial_pointer_for.hpp
core/
    core.hpp
error/
    error.cpp
    error.hpp
format/
    format_traits.hpp
    format_traits.ipp
    format.hpp
function/
    make_unique_function.hpp
    make_unique_function.ipp
    unique_function.hpp
    unique_function.ipp
hash/
    hash_map.hpp
    hash_map.ipp
intrusive/
    intrusive_list.hpp
    intrusive_list.ipp
    intrusive_node.hpp
    intrusive_node.ipp
list/
    list.hpp
    list.ipp
    list_const_iterator.hpp
    list_const_iterator.ipp
    list_iterator.hpp
    list_iterator.ipp
log/
    console_sink.cpp
    console_sink.hpp
    log_framework.hpp
    log_engine.cpp
    log_engine.hpp
    log_message.cpp
    log_message.hpp
    log_sink.hpp
macro/
    concat.hpp
    here.hpp
    to_string.hpp
map/
    map.hpp
    map.ipp
    map_const_iterator.hpp
    map_const_iterator.ipp
    map_iterator.hpp
    map_iterator.ipp
memory/
    address.hpp
    address.ipp
    aligned_raw_ptr.cpp
    aligned_raw_ptr.hpp
    alignment.hpp
    allocate.cpp
    allocate.hpp
    allocate_aligned.cpp
    allocate_aligned.hpp
    allocator.cpp
    allocator.hpp
    default.cpp
    default.hpp
    placement.hpp
    placement.ipp
    raw_ptr.hpp
    raw_ptr.cpp
ptr/
    make_unique_ptr.hpp
    make_unique_ptr.ipp
    unique_ptr.hpp
    unique_ptr.ipp
reflect/
    reflect.hpp
result/
    make_result.hpp
    make_result.ipp
    result.hpp
    result.ipp
string/
    string.cpp
    string.hpp
    string_builder.cpp
    string_builder.hpp
    string_view.hpp
    string_view.ipp
test/
    assertion_failure.hpp
    assertion_failure.cpp
    console_reporter.cpp
    console_reporter.hpp
    copy_only.cpp
    copy_only.hpp
    move_only.cpp
    move_only.hpp
    test.hpp
    test_engine.cpp
    test_engine.hpp
    test_framework.hpp
    test_factory.hpp
    test_factory.ipp
    test_reporter.hpp
    test_suite.cpp
    test_suite.hpp
    test_suite_registrar.cpp
    test_suite_registrar.hpp
utility/
    source_location.cpp
    source_location.hpp
vector/
    vector.hpp
    vector.ipp
    vector_view.hpp
    vector_view.ipp

# Policy based design #

Memory allocation policy is described by IAllocator interface.

UniquePtr deletion is a lightweight copyable policy?

Comparison policy is described by pure static template parameter Comparator
Hash function and quality checker are described similary.

ensure something
assure someone

add class invariant checkers

refactor unique_ptr
replace deleter by pointer to allocator interface

relationship between string builder and string
which functionality is part of string builder and which is part of string

it seems like we need an string_builder concept or interface

I found interesting question. What would be better auto or auto* for pointers?


# documentation style #

For classes

\brief

For functions and methods

\brief

\param
\param
\param

\return

\pre

\post

\warning

\note

\details

Add fault injection framework as part of wheels, because it is also used in
multiple projects.

Note for future projects. All stuff that is scattered over many repositories
must be put into one big repository, because all this things is a core component.