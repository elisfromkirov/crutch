Add requirements on container element types (but how to call it correctly)

template <typename Type>
concept Containable = !std::is_reference_v<Type> &&
                      !std::is_void<Type> &&
                      !std::is_const<Type> &&
                      !std::is_volatile<Type>;

Container stores objects thus reference types and void type are not supported.

Container does not store const and volatile objects (std containers)

Also, destructor must not throw an exception.

New abilities added if Type satisfies more requirements.

template <typename Type>
concept Pointee = !std::is_reference_v<Type>;

Pointers to references and references to references are not existed.

TODO: correct names!

Containable