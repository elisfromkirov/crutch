#pragma once#include <crutch/concept/moveable.hpp>#include <crutch/concept/copyable.hpp>#include <crutch/memory/placement.hpp>namespace crutch {template <typename Type>class Optional { private:  enum State : Uint8 {    kNull = 0,    kValue = 1  }; public:  Optional() noexcept;  Optional(const Optional& other) requires Copyable<Type>;  Optional& operator=(const Optional& other) requires Copyable<Type>;  Optional(Optional&& other) noexcept requires Moveable<Type>;  Optional& operator=(Optional&& other) noexcept requires Moveable<Type>;  ~Optional() noexcept;  Type& Value() noexcept;  const Type& Value() const noexcept;  bool HasValue() const noexcept;  template <typename... Arguments>  requires Constructible<Type, Arguments&&...>  void Emplace(Arguments&&... arguments) noexcept(kIsNothrowConstructible<Type, Arguments&&...>);  void Reset(); private:  union alignas(alignof(Type)) {    Byte dummy_;    Type value_;  };  State state_;};}  // namespace crutch#define OPTIONAL_BASE_IMPL#include <crutch/optional/optional.ipp>#undef OPTIONAL_BASE_IMPL